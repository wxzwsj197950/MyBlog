---
layout:     post
title:      "Leetcode304 Range Sum Query 2D - Immutable"
subtitle:   "动态规划"
date:       2016-01-19 13:22:00
author:     "Wuxx"
header-img: "img/post-bg-01.jpg"
---

## Range Sum Query 2D - Immutable ##

题目：

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).![](https://leetcode.com/static/images/courses/range_sum_query_2d.png)

The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

**Example:**

	Given matrix = [
 	 [3, 0, 1, 4, 2],
	 [5, 6, 3, 2, 1],
 	 [1, 2, 0, 1, 5],
 	 [4, 1, 0, 1, 7],
 	 [1, 0, 3, 0, 5]
	]

	sumRegion(2, 1, 4, 3) -> 8
	sumRegion(1, 1, 2, 2) -> 11
	sumRegion(1, 2, 2, 4) -> 12

Note:

1. You may assume that the matrix does not change.
1. There are many calls to sumRegion function.
1. You may assume that row1 ≤ row2 and col1 ≤ col2.

题目大意：给一个二维矩阵，求出左上角x1,y1到右下角x2,y2坐标内所有数的和。

普通方法超时不多说。。。所以用动态规划。

一个二维数组sum[r][c]表示r行，c列到0行，0列的数的和。

则sum[r,c] = matrix[r,c]+sum[r-1,c]+sum[r,c-1]-sum[r-1,c-1];

求sumRegion时

sumRegion(row1,col1,row2,col2) = 
sum[row1-1,col1-1]+sum[row2,col2]-sum[row1-1,col2]-sum[row2,col1-1]

所以完整代码如下：

	public class NumMatrix {
        int[,] sum;
        public NumMatrix(int[,] matrix)
        {
            if (matrix.GetLength(0) == 0 || matrix.GetLength(1) == 0 || matrix == null) return;
            sum = new int[matrix.GetLength(0),matrix.GetLength(1)];
            sum[0,0] = 0;
            for (int r = 0; r < matrix.GetLength(0); r++)
            {
                for (int c = 0; c < matrix.GetLength(1); c++)
                {
                    if (r == 0 && c == 0) sum[r, c] = matrix[r, c];
                    else if (r == 0) sum[r,c]=matrix[r,c]+sum[r,c-1];
                    else if (c == 0) sum[r,c] = matrix[r,c] + sum[r-1,c];
                    else sum[r,c] = matrix[r,c]+sum[r-1,c]+sum[r,c-1]-sum[r-1,c-1];
                }
            }
        }

        public int SumRegion(int row1, int col1, int row2, int col2)
        {
            if (row1 == 0 && col1 == 0) return sum[row2, col2];
            if (row1 == 0) return sum[row2, col2] - sum[row2, col1 - 1];
            if (col1 == 0) return sum[row2,col2] - sum[row1-1,col2];
            return sum[row1-1,col1-1]+sum[row2,col2]-sum[row1-1,col2]-sum[row2,col1-1];
        }
	}